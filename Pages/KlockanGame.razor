@page "/klockan"
@inject PlayerService PlayerService
@inject NavigationManager NavigationManager
@inject DartContext _context
@inject IJSRuntime JSRuntime

<div class="container">
    <h1 class="title">@titleMessage</h1>

    @if (klockanGamePlayers == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @if (!string.IsNullOrEmpty(winnerMessage))
        {
            <p class="winnerMessage">@winnerMessage</p>
            <div class="buttons">
                <button class="uncommon" @onclick="PlayAgain">Spela igen?</button>
                <button class="epic" @onclick="GoToHomePage">Ta mig härifrån</button>
            </div>
        }
        else
        {
            <div class="player-cards">
                @foreach (var gamePlayer in klockanGamePlayers)
                {
                    @if (IsPlayerSelected(gamePlayer.PlayerId))
                    {
                        <div class="card">
                            <div class="card-header">
                                <h4>@gamePlayer.Player.Name</h4>
                            </div>
                            <div class="card-body">
                                <p><strong>Current Number:</strong> @gamePlayer.CurrentNumber</p>
                                <p><strong>Attempts:</strong> @gamePlayer.Attempts</p>
                                <div class="buttons">
                                    <button class="miss" @onclick='() => RegisterHit(gamePlayer.PlayerId, "Miss")'>Miss</button>
                                    <button class="uncommon" @onclick='() => RegisterHit(gamePlayer.PlayerId, "Single")'>+1 Single</button>
                                    <button class="rare" @onclick='() => RegisterHit(gamePlayer.PlayerId, "Double")'>+2 Double</button>
                                    <button class="epic" @onclick='() => RegisterHit(gamePlayer.PlayerId, "Triple")'>+3 Triple</button>
                                    @if (gamePlayer.CurrentNumber == 20)  // Kontrollerar om poängen är exakt 20
                                    {
                                        <button class="legendary" @onclick='() => RegisterHit(gamePlayer.PlayerId, "Bullseye")'>Bullseye</button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="player-selection">
                <h3>Välj spelare:</h3>
                @foreach (var gamePlayer in klockanGamePlayers)
                {
                    <div>
                        <input type="checkbox" @onclick="() => TogglePlayer(gamePlayer.PlayerId)" checked="@IsPlayerSelected(gamePlayer.PlayerId)" />
                        @gamePlayer.Player.Name
                    </div>
                }
            </div>
        }
    }
   
</div>

@code {
    private List<KlockanGamePlayer> klockanGamePlayers;
    private string winnerMessage = string.Empty;
    private List<int> selectedPlayerIds = new List<int>(); // Lista med valda spelare
    private string titleMessage = "DAS UHR"; // Ny variabel för att ändra rubriken
    private string returnToIndex = "Tillbaka"; // Ny variabel för att ändra rubriken

    protected override async Task OnInitializedAsync()
    {
        await LoadGame();
    }

    private async Task LoadGame()
    {
        // Hämta alla spelare från din PlayerService
        var players = await PlayerService.GetAllPlayersAsync();

        // Mappa spelare till KlockanGamePlayers (anpassa detta efter din data)
        klockanGamePlayers = players.Select(player => new KlockanGamePlayer
            {
                PlayerId = player.Id,
                Player = player, // Koppla din Player-objekt till KlockanGamePlayer
                CurrentNumber = 1,
                Attempts = 0
            }).ToList();

        winnerMessage = string.Empty; // Återställ vinnarmeddelandet
    }

    private void RegisterHit(int playerId, string hitType)
    {
        var gamePlayer = klockanGamePlayers.FirstOrDefault(p => p.PlayerId == playerId);

        if (gamePlayer != null)
        {
            switch (hitType)
            {
                case "Miss":
                    gamePlayer.Attempts += 1;
                    break;
                case "Single":
                    gamePlayer.CurrentNumber += 1;
                    gamePlayer.Attempts += 1;
                    break;
                case "Double":
                    gamePlayer.CurrentNumber += 2;
                    gamePlayer.Attempts += 1;
                    break;
                case "Triple":
                    gamePlayer.CurrentNumber += 3;
                    gamePlayer.Attempts += 1;
                    break;
                case "Bullseye":
                    gamePlayer.CurrentNumber += 1;
                    gamePlayer.Attempts += 1;
                    break;
            }

            // Kontrollera om spelaren har nått 21 poäng
            if (gamePlayer.CurrentNumber >= 21)
            {
                winnerMessage = $"Hurra för {gamePlayer.Player.Name}, du är dartmästare!!!!!";
                klockanGamePlayers = new List<KlockanGamePlayer>(); // Rensa spelare
                titleMessage = $"Die Uhr hat für dieses Mal ihren letzten Schlag geschlagen"; // Uppdatera rubriken vid vinst
                
                // Trigga konfetti
                TriggerConfetti();
            }

            // Uppdatera UI
            StateHasChanged();
        }
    }

    private void TogglePlayer(int playerId)
    {
        if (selectedPlayerIds.Contains(playerId))
        {
            selectedPlayerIds.Remove(playerId);
        }
        else
        {
            selectedPlayerIds.Add(playerId);
        }
    }

    private bool IsPlayerSelected(int playerId)
    {
        return selectedPlayerIds.Contains(playerId);
    }

    private void PlayAgain()
    {
        // Navigera till samma sida för att återställa spelet
        NavigationManager.NavigateTo("/klockan", true);
    }


    private async Task TriggerConfetti()
    {
        await JSRuntime.InvokeVoidAsync("canvasConfetti");
    }

    private void GoToHomePage()
    {
        NavigationManager.NavigateTo("/", true); // Navigera till startsidan
    }

}

